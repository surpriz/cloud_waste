version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cloudwaste_postgres_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: cloudwaste_redis_prod
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FastAPI Backend
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: cloudwaste_backend_prod
    command: sh -c "./init_encryption.sh && uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4"
    ports:
      - "127.0.0.1:8000:8000"  # Only expose to localhost (Nginx will proxy)
    volumes:
      - encryption_key:/encryption_key_data
      - ../init_encryption.sh:/app/init_encryption.sh:ro
    env_file:
      - ../.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - APP_ENV=production
      - DEBUG=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_network
      - frontend_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Worker
  celery_worker:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: cloudwaste_celery_worker_prod
    command: sh -c "./init_encryption.sh && celery -A app.workers.celery_app worker --loglevel=info --concurrency=2"
    volumes:
      - encryption_key:/encryption_key_data
      - ../init_encryption.sh:/app/init_encryption.sh:ro
    env_file:
      - ../.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - APP_ENV=production
      - DEBUG=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.workers.celery_app inspect ping -d celery@$$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: cloudwaste_celery_beat_prod
    command: sh -c "./init_encryption.sh && celery -A app.workers.celery_app beat --loglevel=info"
    volumes:
      - encryption_key:/encryption_key_data
      - ../init_encryption.sh:/app/init_encryption.sh:ro
      - celery_beat_data:/app/celerybeat-schedule
    env_file:
      - ../.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - APP_ENV=production
      - DEBUG=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Next.js Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.production
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME}
    container_name: cloudwaste_frontend_prod
    ports:
      - "127.0.0.1:3000:3000"  # Only expose to localhost (Nginx will proxy)
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME}
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - frontend_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  backend_network:
    driver: bridge
    # Removed internal: true to allow Celery workers to access external APIs (Azure, AWS)
    # Security is maintained by not exposing container ports publicly (only 127.0.0.1:*)
  frontend_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  encryption_key:
    driver: local
  celery_beat_data:
    driver: local


name: Deploy to Production

on:
  push:
    branches:
      - master
  workflow_dispatch:  # Allow manual trigger

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
      
      - name: 🚀 Deploy to Production (Zero Downtime)
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          ssh ${VPS_USER}@${VPS_HOST} << 'ENDSSH'
            # Disable immediate exit on error - we want to handle rollback ourselves
            set +e

            echo "╔════════════════════════════════════════════════════════════════════╗"
            echo "║                                                                    ║"
            echo "║         🚀 DÉPLOIEMENT AUTOMATIQUE (GitHub Actions)                ║"
            echo "║         🔵🟢 Blue-Green Deployment avec Rollback                   ║"
            echo "║                                                                    ║"
            echo "╚════════════════════════════════════════════════════════════════════╝"
            echo ""

            cd /opt/cloudwaste

            # Pull latest changes
            echo "📥 Récupération des modifications..."
            git fetch origin master
            git reset --hard origin/master
            echo "✓ Code mis à jour vers commit: $(git rev-parse --short HEAD)"

            # Run zero-downtime deploy script
            echo ""
            echo "🔄 Lancement du déploiement sans coupure..."
            bash deployment/zero-downtime-deploy.sh

            DEPLOY_EXIT_CODE=$?

            if [ $DEPLOY_EXIT_CODE -eq 0 ]; then
                echo ""
                echo "✅ Déploiement terminé avec succès !"
                exit 0
            else
                echo ""
                echo "❌ Le déploiement a échoué - Rollback automatique effectué"
                echo "ℹ️  L'application reste accessible avec la dernière version stable"
                exit 1
            fi
          ENDSSH
      
      - name: 🧪 Post-Deployment Verification
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          echo "🧪 Vérification finale post-déploiement..."
          echo ""
          echo "ℹ️  Note: Les health checks ont déjà été effectués pendant le déploiement"
          echo "ℹ️  Cette étape effectue une vérification finale de sécurité"
          sleep 5

          # Final verification - Frontend
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://cutcosts.tech || echo "000")
          if [ "$FRONTEND_STATUS" == "200" ] || [ "$FRONTEND_STATUS" == "304" ]; then
            echo "✅ Frontend: OK (HTTP $FRONTEND_STATUS)"
          else
            echo "⚠️  Frontend: WARNING (HTTP $FRONTEND_STATUS)"
            echo "Note: Le déploiement a réussi mais cette vérification finale a échoué"
          fi

          # Final verification - Backend
          API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://cutcosts.tech/api/v1/health || echo "000")
          if [ "$API_STATUS" == "200" ]; then
            echo "✅ Backend API: OK (HTTP $API_STATUS)"
          else
            echo "⚠️  Backend API: WARNING (HTTP $API_STATUS)"
            echo "Note: Le déploiement a réussi mais cette vérification finale a échoué"
          fi

          echo ""
          echo "✅ Vérification finale terminée"
      
      - name: 📊 Deployment Summary
        if: success()
        run: |
          echo "╔════════════════════════════════════════════════════════════════════╗"
          echo "║                                                                    ║"
          echo "║              ✅ DÉPLOIEMENT RÉUSSI (ZERO DOWNTIME)                 ║"
          echo "║                                                                    ║"
          echo "╚════════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "🌐 Application en ligne:"
          echo "   • Site web: https://cutcosts.tech"
          echo "   • API Docs: https://cutcosts.tech/api/docs"
          echo ""
          echo "🔒 Fonctionnalités de sécurité actives:"
          echo "   • Déploiement Blue-Green (aucune coupure)"
          echo "   • Health checks automatiques"
          echo "   • Rollback automatique en cas d'échec"
          echo "   • Version stable sauvegardée pour les prochains déploiements"
          echo ""

      - name: ❌ Deployment Failed
        if: failure()
        run: |
          echo "╔════════════════════════════════════════════════════════════════════╗"
          echo "║                                                                    ║"
          echo "║              ❌ ÉCHEC DU DÉPLOIEMENT                               ║"
          echo "║                                                                    ║"
          echo "╚════════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "⚠️  Le déploiement a échoué, mais ne vous inquiétez pas !"
          echo ""
          echo "🔒 Protection active:"
          echo "   • Rollback automatique effectué"
          echo "   • Application restaurée à la dernière version stable"
          echo "   • Aucune coupure de service pour les utilisateurs"
          echo ""
          echo "🔍 Prochaines étapes:"
          echo "   1. Consultez les logs ci-dessus pour identifier le problème"
          echo "   2. Corrigez le code localement"
          echo "   3. Poussez à nouveau - le déploiement sera automatique"
          echo ""
